generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum UserRole {
  ADMIN
  USER
}

model User {
  id                 String    @id @default(auto()) @map("_id") @db.ObjectId
  name               String
  email              String    @unique
  emailVerified      DateTime?
  image              String?
  password           String?
  isTwoFactorEnabled Boolean   @default(false)
  role               UserRole  @default(USER)

  accounts          Account[]
  comments          BlogComment[]
  Payment           Payment[]
  EventRegistration EventRegistration[]
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

enum TokenType {
  RESET_PASSWORD
  EMAIL_VERIFICATION
  TWO_FACTOR
}

model Token {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  userId    String    @db.ObjectId
  type      TokenType
  token     String    @unique
  createdAt DateTime  @default(now())
  expiresAt DateTime

  @@unique([type, token])
}

model Blog {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  userId     String   @db.ObjectId
  author     String
  title      String
  slug       String   @unique
  coverImage String
  categories String[]
  isPaid     Boolean  @default(false)
  content    String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  comments BlogComment[]
}

model BlogComment {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String   @db.ObjectId
  blogId    String   @db.ObjectId
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  blog   Blog @relation(fields: [blogId], references: [id], onDelete: Cascade)
  author User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum EventStatus {
  UPCOMING
  COMPLETED
  CANCELLED
}

model Event {
  id          String      @id @default(auto()) @map("_id") @db.ObjectId
  slug        String      @unique
  title       String
  coverImage  String
  description String
  price       String
  categories  String[]
  location    String
  startDate   DateTime
  endDate     DateTime
  status      EventStatus @default(UPCOMING)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  Payment           Payment[]
  EventRegistration EventRegistration[]
}

model EventRegistration {
  id      String @id @default(auto()) @map("_id") @db.ObjectId
  eventId String @db.ObjectId
  userId  String @db.ObjectId
  phone   String

  user  User  @relation(fields: [userId], references: [id], onDelete: Cascade)
  event Event @relation(fields: [eventId], references: [id], onDelete: Cascade)

  @@unique([eventId, userId])
}

model Payment {
  id                String   @id @default(auto()) @map("_id") @db.ObjectId
  userId            String   @db.ObjectId
  eventId           String   @db.ObjectId
  razorpayOrderId   String   @unique
  razorpayPaymentId String   @unique
  amount            Float
  status            String
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  user  User  @relation(fields: [userId], references: [id], onDelete: Cascade)
  event Event @relation(fields: [eventId], references: [id], onDelete: Cascade)

  @@index([userId, eventId])
}
